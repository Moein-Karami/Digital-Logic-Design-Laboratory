
module Shift_reg(input clk, rst, ld, sh_en, input[15 : 0]in, output reg[15 : 0] out);
	always @(posedge clk, posedge rst)
	begin
		if (rst)
			out = 0;
		else
		begin
			if (ld)
				out = in;
			else if (sh_en)
				out = {1'b0, out[15 : 1]};
		end
	end
endmodule	

module Register(input clk, rst, ld, input[1 : 0]in, output reg[1 : 0]out);
	always @(posedge clk, posedge rst)
	begin
		if (rst)
			out = 0;
		else if (ld)
			out = in;
	end
endmodule

module Shifter(input [1 : 0]n, input[17 : 0]in, output reg [20 : 0]out);
	always @(n, in)
	begin
		case(n)
			2'b00: out = {3'b000, in};
			2'b01: out = {2'b00, in, 1'b0};
			2'b10: out = {1'b0, in, 2'b00};
			2'b11: out = {in, 3'b000};
			default: out = in;
		endcase
	end
endmodule 